name: Build Cannagrow App

on:
  workflow_dispatch:
  push:
    branches: [ java ]
  pull_request:
    branches: [ java ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./java/Cannagrow
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean package assembly:single

      - name: Run Tests
        run: mvn test

      - name: Create Linux executable (.deb)
        run: |
          mkdir -p target/linux-executable
          if [ ! -f "target/Cannagrow-1.0-SNAPSHOT-jar-with-dependencies.jar" ]; then
            cp target/Cannagrow-1.0-SNAPSHOT.jar target/Cannagrow-1.0-SNAPSHOT-jar-with-dependencies.jar
          fi
          sudo apt-get update && sudo apt-get install -y fakeroot binutils
          jpackage --input target/ \
                   --name Cannagrow \
                   --main-jar Cannagrow-1.0-SNAPSHOT-jar-with-dependencies.jar \
                   --main-class com.example.cannagrow.Main \
                   --type deb \
                   --app-version 1.0.0 \
                   --vendor "Your Company" \
                   --description "Cannagrow Application" \
                   --dest target/linux-executable

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            ./java/Cannagrow/target/*.jar
            ./java/Cannagrow/target/linux-executable

  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./java/Cannagrow
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean package assembly:single

      - name: Run Tests
        run: mvn test

      - name: Download Launch4j
        shell: powershell
        run: |
          # Create a directory for Launch4j
          New-Item -Path "launch4j" -ItemType Directory -Force
          
          # Use GitHub directly as a mirror for Launch4j
          $launch4jMirrorUrl = "https://github.com/DrOverbuild/launch4j-mirror/raw/main/launch4j-3.14-win32.zip"
          
          Write-Host "Downloading Launch4j from GitHub mirror"
          
          try {
            # Try first method - Invoke-WebRequest
            Invoke-WebRequest -Uri $launch4jMirrorUrl -OutFile "launch4j\launch4j.zip" -UseBasicParsing
          }
          catch {
            Write-Host "First download method failed, trying alternative method..."
            try {
              # Alternative download method
              [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
              $client = New-Object System.Net.WebClient
              $client.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
              $client.DownloadFile($launch4jMirrorUrl, "$(Get-Location)\launch4j\launch4j.zip")
            }
            catch {
              Write-Host "Second download method failed, trying curl..."
              # Last resort - use curl
              curl.exe -L -o "launch4j\launch4j.zip" $launch4jMirrorUrl
            }
          }
          
          # Check if download succeeded
          if (-not (Test-Path "launch4j\launch4j.zip")) {
            throw "Failed to download Launch4j"
          }
          
          Write-Host "Download successful, extracting Launch4j..."
          
          # Extract the downloaded zip
          try {
            Expand-Archive -Path "launch4j\launch4j.zip" -DestinationPath "launch4j" -Force
          }
          catch {
            Write-Host "Error during extraction: $_"
            throw "Failed to extract Launch4j"
          }
          
          # Verify extraction by finding the launch4j executable
          $launch4jExe = Get-ChildItem -Path "launch4j" -Recurse -Filter "launch4j.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
          
          if ($launch4jExe) {
            Write-Host "Launch4j extracted successfully, found at: $($launch4jExe.FullName)"
          } else {
            Write-Host "Launch4j extraction verification failed. Directory contents:"
            Get-ChildItem -Path "launch4j" -Recurse
            throw "Failed to locate launch4j.exe after extraction"
          }

      - name: Create Windows executable
        shell: powershell
        run: |
          mkdir -Path "target\windows-executable" -Force
          
          # Verify that launch4j config exists
          if (-not (Test-Path "src\launch4j\launch4j.xml")) {
            throw "Required configuration file src\launch4j\launch4j.xml does not exist"
          }
          
          # Ensure the jar exists
          $jar = "target\Cannagrow-1.0-SNAPSHOT-jar-with-dependencies.jar"
          if (-not (Test-Path $jar)) { 
            Write-Host "JAR with dependencies not found, copying regular JAR"
            Copy-Item "target\Cannagrow-1.0-SNAPSHOT.jar" -Destination $jar 
          }
          
          # Find and run launch4j with the specified config file
          $launch4jExe = Get-ChildItem -Path "launch4j" -Recurse -Filter "launch4j.exe" | Select-Object -First 1 -ExpandProperty FullName
          if ($launch4jExe) {
            Write-Host "Found Launch4j at: $launch4jExe"
            Write-Host "Using configuration from src\launch4j\launch4j.xml"
            & $launch4jExe "src\launch4j\launch4j.xml"
          } else {
            throw "Could not find launch4j.exe in the extracted directories"
          }
          
          # Verify the executable was created
          if (Test-Path "target\windows-executable\Cannagrow.exe") {
            Write-Host "EXE created successfully"
          } else {
            throw "Failed to create Cannagrow.exe"
          }

      - name: Upload Windows EXE
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: ./java/Cannagrow/target/windows-executable/Cannagrow.exe
